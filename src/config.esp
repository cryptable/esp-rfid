bool loadConfiguration()
{
	File configFile = SPIFFS.open("/config.json", "r");
	if (!configFile)
	{
#ifdef DEBUG
		Serial.println(F("[ WARN ] Failed to open config file"));
#endif
		return false;
	}
	size_t size = configFile.size();
	std::unique_ptr<char[]> buf(new char[size]);
	configFile.readBytes(buf.get(), size);
	DynamicJsonDocument json(1024);
	DeserializationError error = deserializeJson(json, buf.get());
	if (error)
	{
#ifdef DEBUG
		Serial.println(F("[ WARN ] Failed to parse config file"));
#endif
		return false;
	}
#ifdef DEBUG
	Serial.println(F("[ INFO ] Config file found"));
	serializeJsonPretty(json, Serial);
	Serial.println();
#endif
	JsonObject network = json["network"];
	JsonObject hardware = json["hardware"];
	JsonObject general = json["general"];
	JsonObject mqtt = json["mqtt"];
	JsonObject ntp = json["ntp"];
#ifdef DEBUG
	Serial.println(F("[ INFO ] Trying to setup RFID Hardware"));
#endif
	if (hardware.containsKey("wifipin"))
	{
		wifipin = hardware["wifipin"];
		if (wifipin!=255)
		{
			pinMode(wifipin, OUTPUT);
			digitalWrite(wifipin, LEDoff);
		}
	}

	if (hardware.containsKey("buttonpin"))
	{
		buttonPin = hardware["buttonpin"];
		if (buttonPin != 255)
		{
			button = Bounce();
			button.attach(buttonPin, INPUT_PULLUP);
			button.interval(30);
		}
	}

	readerType = hardware["readerType"];
	if (readerType == 1 || readerType == 5)
	{
#ifdef WIEGAND_READER
		int wgd0pin = hardware["wgd0pin"];
		int wgd1pin = hardware["wgd1pin"];
		setupWiegandReader(wgd0pin, wgd1pin); // also some other settings like weather to use keypad or not, LED pin, BUZZER pin, Wiegand 26/34 version
#endif
	}
	else if (readerType == 0 || readerType == 4)
	{
#ifdef MFRC522_READER
		rfidss = 21;
		if (hardware.containsKey("sspin"))
		{
			rfidss = hardware["sspin"];
		}
		int rfidgain = hardware["rfidgain"];
		setupMFRC522Reader(rfidss, rfidgain);
#endif
	}
	else if (readerType == 2 || readerType == 6)
	{
#ifdef PN532_READER
		rfidss = hardware["sspin"];
		setupPN532Reader(rfidss);
#endif
	}
	#ifndef DEBUG
	if (readerType>2) Serial.begin(9600);
	#endif

	autoRestartIntervalSeconds = general["restart"];
	wifiTimeout = network["offtime"];
#ifdef DEBUG
	Serial.println("[ INFO ] hostname");
#endif
	deviceHostname = strdup(general["hostnm"]);
#ifdef DEBUG
	Serial.print("[ INFO ] Starting Wifi : ");
	Serial.println(deviceHostname);
#endif
	WiFi.hostname(deviceHostname);
	if (!MDNS.begin(deviceHostname))
	{
#ifdef DEBUG
		Serial.println("[ WARN ]Error setting up MDNS responder!");
#endif
	}
	MDNS.addService("http", "tcp", 80);
#ifdef DEBUG
		Serial.println("[ INFO ] Http port 80!");
#endif
	const char *ntpserver = ntp["server"];
	int ntpinter = ntp["interval"];
	timeZone = ntp["timezone"];
	activateTime = hardware["rtime"];
	lockType = hardware["ltype"];
	relayType = hardware["rtype"];
	relayPin = hardware["rpin"];
	pinMode(relayPin, OUTPUT);
#ifdef DEBUG
		Serial.println("[ INFO ] Set relay PIN!");
#endif
	digitalWrite(relayPin, !relayType);
#ifdef DEBUG
		Serial.println("[ INFO ] Write relay PIN!");
#endif
	const char *ssid = network["ssid"];
	const char *password = network["pswd"];
	wmode = network["wmode"];
	http_pass = strdup(general["pswd"]);
	ws.setAuthentication("admin", http_pass);
	if (wmode == 1)
	{
		int hid = network["hide"];
#ifdef DEBUG
		Serial.println(F("[ INFO ] ESP-RFID is running in AP Mode "));
#endif
		const char *apipch;
		if (network.containsKey("apip"))
		{
			apipch = network["apip"];
		}
		else
		{
			apipch = "192.168.4.1";
		}
		const char *apsubnetch;
		if (network.containsKey("apsubnet"))
		{
			apsubnetch = network["apsubnet"];
		}
		else
		{
			apsubnetch = "255.255.255.0";
		}
		IPAddress apip;
		IPAddress apsubnet;
		apip.fromString(apipch);
		apsubnet.fromString(apsubnetch);
		return startAP(apip, apsubnet, hid, ssid, password);
	}
	else
	{
		const char *bssidmac = network["bssid"];
		byte bssid[6];
	#ifdef DEBUG
		Serial.println("[ INFO ] Start parsing!");
	#endif
		parseBytes(bssidmac, ':', bssid, 6, 16);
		if (network["dhcp"] == "0")
		{
			WiFi.mode(WIFI_STA);
			const char *clientipch = network["ip"];
			const char *subnetch = network["subnet"];
			const char *gatewaych = network["gateway"];
			const char *dnsch = network["dns"];
			IPAddress clientip;
			IPAddress subnet;
			IPAddress gateway;
			IPAddress dns;
			clientip.fromString(clientipch);
			subnet.fromString(subnetch);
			gateway.fromString(gatewaych);
			dns.fromString(dnsch);
			WiFi.config(clientip, gateway, subnet, dns);
		}
		if (!connectSTA(ssid, password, bssid))
		{
			return false;
		}
	}
#ifdef DEBUG
	Serial.println("[ INFO ] Trying to setup NTP Server");
#endif
	/*
	IPAddress timeserverip;
	WiFi.hostByName(ntpserver, timeserverip);
	String ip = printIP(timeserverip);
	writeEvent("INFO", "ntp", "Connecting NTP Server", ip);
	*/
	NTP.Ntp(ntpserver, timeZone, ntpinter * 60);
	mqttenabled = mqtt["enabled"];
	if (mqttenabled == 1)
	{
#ifdef DEBUG
		Serial.println("[ INFO ] Trying to setup MQTT");
#endif
		String mhsString = mqtt["host"];
		mhs = strdup(mhsString.c_str());

		mport = mqtt["port"];
		
		String muserString = mqtt["user"];
		muser = strdup(muserString.c_str());
		String mpasString = mqtt["pswd"];
		mpas = strdup(mpasString.c_str());
		String mqttTopicString = mqtt["topic"];
		mqttTopic = strdup(mqttTopicString.c_str());
		
		mqttClient.setServer(mhs, mport);
		mqttClient.setCredentials(muser, mpas);
		mqttClient.onDisconnect(onMqttDisconnect);
		mqttClient.onPublish(onMqttPublish);
		mqttClient.onConnect(onMqttConnect);
#ifdef DEBUG
		Serial.println("[ INFO ] try to call mqttconnect ");
#endif
		connectToMqtt();
	}
#ifdef DEBUG
	Serial.println(F("[ INFO ] Configuration done."));
#endif
	return true;
}
